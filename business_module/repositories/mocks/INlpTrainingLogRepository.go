// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domains "inc-nlp-service-echo/business_module/domains"

	gorm "github.com/jinzhu/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// INlpTrainingLogRepository is an autogenerated mock type for the INlpTrainingLogRepository type
type INlpTrainingLogRepository struct {
	mock.Mock
}

// BulkDeleteByIDs provides a mock function with given fields: ids
func (_m *INlpTrainingLogRepository) BulkDeleteByIDs(ids []string) *gorm.DB {
	ret := _m.Called(ids)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func([]string) *gorm.DB); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Count provides a mock function with given fields:
func (_m *INlpTrainingLogRepository) Count() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CountByKeywordMinhash provides a mock function with given fields: KeywordMinhash
func (_m *INlpTrainingLogRepository) CountByKeywordMinhash(KeywordMinhash uint32) int64 {
	ret := _m.Called(KeywordMinhash)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint32) int64); ok {
		r0 = rf(KeywordMinhash)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ID
func (_m *INlpTrainingLogRepository) DeleteByID(ID uuid.UUID) *gorm.DB {
	ret := _m.Called(ID)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(uuid.UUID) *gorm.DB); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ID
func (_m *INlpTrainingLogRepository) FindByID(ID uuid.UUID) domains.NlpTrainingLogDomain {
	ret := _m.Called(ID)

	var r0 domains.NlpTrainingLogDomain
	if rf, ok := ret.Get(0).(func(uuid.UUID) domains.NlpTrainingLogDomain); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(domains.NlpTrainingLogDomain)
	}

	return r0
}

// Pagination provides a mock function with given fields: PageIndex, Limit
func (_m *INlpTrainingLogRepository) Pagination(PageIndex int, Limit int) []domains.NlpTrainingLogDomain {
	ret := _m.Called(PageIndex, Limit)

	var r0 []domains.NlpTrainingLogDomain
	if rf, ok := ret.Get(0).(func(int, int) []domains.NlpTrainingLogDomain); ok {
		r0 = rf(PageIndex, Limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.NlpTrainingLogDomain)
		}
	}

	return r0
}

// PaginationByKeywordMinhash provides a mock function with given fields: KeywordMinhash, PageIndex, Limit
func (_m *INlpTrainingLogRepository) PaginationByKeywordMinhash(KeywordMinhash uint32, PageIndex int, Limit int) []domains.NlpTrainingLogDomain {
	ret := _m.Called(KeywordMinhash, PageIndex, Limit)

	var r0 []domains.NlpTrainingLogDomain
	if rf, ok := ret.Get(0).(func(uint32, int, int) []domains.NlpTrainingLogDomain); ok {
		r0 = rf(KeywordMinhash, PageIndex, Limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.NlpTrainingLogDomain)
		}
	}

	return r0
}

// Save provides a mock function with given fields: Domain
func (_m *INlpTrainingLogRepository) Save(Domain *domains.NlpTrainingLogDomain) {
	_m.Called(Domain)
}
