// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-10-05 19:56:51.45092 +0700 +07 m=+0.058284725

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server Petstore server.",
        "title": "Swagger Example API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:9000",
    "basePath": "/",
    "paths": {
        "/v1/nlp/record": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Read nlp record by shop id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "shop identify",
                        "name": "shop_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Drop nlp record by shop id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "shop identify",
                        "name": "shop_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/nlp/record/reply": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Read nlp model by shop id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "shop identify",
                        "name": "shop_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "incomming keyword",
                        "name": "keyword",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.NlpReplyModel"
                        }
                    }
                }
            }
        },
        "/v1/nlp/record/upload.xlsx": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Upload nlp record with xlsx",
                "parameters": [
                    {
                        "type": "file",
                        "description": "this is a test file",
                        "name": "xlsx",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "shop identify",
                        "name": "shop_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.NlpReplyModel": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "intent": {
                    "type": "string"
                },
                "keyword": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{ Schemes: []string{}}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface {}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
